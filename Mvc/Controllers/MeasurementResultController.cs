/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.27
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;

using Telerik.Sitefinity;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.Data.Linq.Dynamic;
using Telerik.Sitefinity.DynamicModules.Model;
using Telerik.Sitefinity.GenericContent.Model;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Security;
using Telerik.Sitefinity.Lifecycle;
using Telerik.Sitefinity.Data;
using Telerik.Sitefinity.Versioning;
using Telerik.Sitefinity.RelatedData;
using System;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using SitefinityWebApp.MVC.Controllers.Tools;

namespace SitefinityWebApp.Mvc.Controllers
{
	[ControllerToolboxItem(Name = "MeasurementResult_MVC", Title = "MeasurementResult", SectionName = "CustomWidgets")]
	public class MeasurementResultController : Controller, IPersonalizable
	{
		protected override void HandleUnknownAction(string actionName)
		{
			this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
		}

		// GET: MeasurementResult
		public ActionResult Index()
		{
			return View();
		}

        public void store(int grade, string summary, string measurementUrl, string companyUrl)
        {
            this.CreateMeasurementResult(grade, summary, measurementUrl, companyUrl);
        }

        // Creates a new measurementResult item
        public void CreateMeasurementResult(int grade, string summary, string measurementUrl, string companyUrl)
        {
            // Set the provider name for the DynamicModuleManager here. All available providers are listed in
            // Administration -> Settings -> Advanced -> DynamicModules -> Providers
            var providerName = String.Empty;

            // Set a transaction name and get the version manager
            var transactionName = Guid.NewGuid().ToString();
            var versionManager = VersionManager.GetManager(null, transactionName);

            // Set the culture name for the multilingual fields
            var cultureName = "en";
            Telerik.Sitefinity.Services.SystemManager.CurrentContext.Culture = new CultureInfo(cultureName);

            DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);
            Type measurementResultType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.MeasurementResult");
            DynamicContent measurementResultItem = dynamicModuleManager.CreateDataItem(measurementResultType);
            
            var title = "Measurement result of : "+measurementUrl +" of Company : " + companyUrl ;
            
            // This is how values for the properties are set
            measurementResultItem.SetString("Title", title, cultureName);
            measurementResultItem.SetString("Summary", summary, cultureName);
            measurementResultItem.SetValue("Grade", grade);

            // Get related item manager
            DynamicModuleManager measurementManager = DynamicModuleManager.GetManager();
            var measurementType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Measurement");
            var measurementItem = measurementManager.GetDataItems(measurementType).FirstOrDefault(d => d.UrlName == measurementUrl && d.Status == ContentLifecycleStatus.Master);
            if (measurementItem != null)
            {
                // This is how we relate an item
                measurementResultItem.CreateRelation(measurementItem, "Measurement");
            }


            measurementResultItem.SetString("UrlName", new Lstring(Regex.Replace(title.ToLower(), Slugify.UrlNameCharsToReplace, Slugify.UrlNameReplaceString)), cultureName);
            measurementResultItem.SetValue("Owner", SecurityManager.GetCurrentUserId());
            measurementResultItem.SetValue("PublicationDate", DateTime.UtcNow);

            measurementResultItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Draft", new CultureInfo(cultureName));

            // Set item parent
            Type companyType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Company");
            Guid parentId = this.GetParentId(dynamicModuleManager, companyType, companyUrl);
            measurementResultItem.SetParent(parentId, companyType.FullName);

            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(measurementResultItem, false);

            // We can now call the following to publish the item
            ILifecycleDataItem publishedMeasurementResultItem = dynamicModuleManager.Lifecycle.Publish(measurementResultItem);

            // You need to set appropriate workflow status
            measurementResultItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");

            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(measurementResultItem, true);

            // Now the item is published and can be seen in the page

            // Commit the transaction in order for the items to be actually persisted to data store
            TransactionManager.CommitTransaction(transactionName);
        }

        // Gets the id of the first item of the parent type
        private Guid GetParentId(DynamicModuleManager dynamicModuleManager, Type parentType, string companyUrl)
        {
            DynamicContent parent = dynamicModuleManager.GetDataItems(parentType)
                .Where(i => i.Status == ContentLifecycleStatus.Master && i.UrlName == companyUrl).First();
            return parent.Id;
        }
    }
}