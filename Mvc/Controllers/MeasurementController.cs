/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.27
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;

using Telerik.Sitefinity;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.Data.Linq.Dynamic;
using Telerik.Sitefinity.DynamicModules.Model;
using Telerik.Sitefinity.GenericContent.Model;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Security;
using Telerik.Sitefinity.Lifecycle;
using Telerik.Sitefinity.Data;
using Telerik.Sitefinity.Versioning;
using System.Linq;
using System;
using System.Collections.Generic;
using System.Globalization;
using SitefinityWebApp.MVC.Controllers.Tools;
using System.Text.RegularExpressions;

namespace SitefinityWebApp.Mvc.Controllers
{
	[ControllerToolboxItem(Name = "Measurement_MVC", Title = "Measurement", SectionName = "CustomWidgets")]
	public class MeasurementController : Controller, IPersonalizable
	{
		protected override void HandleUnknownAction(string actionName)
		{
			this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
		}

		// GET: Measurement
		public ActionResult Index()
		{
			List<MeasurementModel> measurementModel = new List<MeasurementModel>();

			var measurements = RetrieveCollectionOfMeasurements().Where(p => p.Status == ContentLifecycleStatus.Live && p.Visible == true);

			foreach (var measurement in measurements)
			{
				measurementModel.Add(
					new MeasurementModel
					{
						Name = measurement.GetString("Name"),
						Detail = measurement.GetString("Detail"),
					}
				);
			}

			return View("Index", measurementModel);
		}

        // Demonstrates how a collection of Measurements can be retrieved
        public IQueryable<DynamicContent> RetrieveCollectionOfMeasurements()
        {
            // Set the provider name for the DynamicModuleManager here. All available providers are listed in
            // Administration -> Settings -> Advanced -> DynamicModules -> Providers
            var providerName = String.Empty;

            // Set a transaction name
            var transactionName = Guid.NewGuid().ToString();

            DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);
            Type measurementType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Measurement");
            
            // This is how we get the collection of Measurement items
            var myCollection = dynamicModuleManager.GetDataItems(measurementType);
            // At this point myCollection contains the items from type measurementType
            return myCollection;
        }

		public ActionResult Create()
		{
			return View("Create");
		}

		[HttpPost] // must declared
		public ActionResult Store(MeasurementModel measurement)
		{
            // Set the provider name for the DynamicModuleManager here. All available providers are listed in
            // Administration -> Settings -> Advanced -> DynamicModules -> Providers
            var providerName = String.Empty;

            // Set a transaction name and get the version manager
            var transactionName = Guid.NewGuid().ToString();
            var versionManager = VersionManager.GetManager(null, transactionName);

            // Set the culture name for the multilingual fields
            var cultureName = "en";
            Telerik.Sitefinity.Services.SystemManager.CurrentContext.Culture = new CultureInfo(cultureName);

            DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);
            Type measurementType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Measurement");
            DynamicContent measurementItem = dynamicModuleManager.CreateDataItem(measurementType);

            // This is how values for the properties are set
            measurementItem.SetString("Detail", measurement.Detail, cultureName);
            measurementItem.SetString("Name", measurement.Name, cultureName);

            measurementItem.SetString("UrlName", new Lstring(Regex.Replace(measurement.Name.ToLower(), Slugify.UrlNameCharsToReplace, Slugify.UrlNameReplaceString)), cultureName);
            measurementItem.SetValue("Owner", SecurityManager.GetCurrentUserId());
            measurementItem.SetValue("PublicationDate", DateTime.UtcNow);


            measurementItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Draft", new CultureInfo(cultureName));


            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(measurementItem, false);

            // We can now call the following to publish the item
            ILifecycleDataItem publishedMeasurementItem = dynamicModuleManager.Lifecycle.Publish(measurementItem);

            // You need to set appropriate workflow status
            measurementItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");

            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(measurementItem, true);

            // Now the item is published and can be seen in the page //

            // Commit the transaction in order for the items to be actually persisted to data store
            TransactionManager.CommitTransaction(transactionName);

            return RedirectToAction("Index");
        }
	}
}