/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.27
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using System;
using System.Linq;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;

using Telerik.Sitefinity;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.Data.Linq.Dynamic;
using Telerik.Sitefinity.DynamicModules.Model;
using Telerik.Sitefinity.GenericContent.Model;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Security;
using Telerik.Sitefinity.Lifecycle;
using Telerik.Sitefinity.Data;
using Telerik.Sitefinity.Versioning;

namespace SitefinityWebApp.Mvc.Controllers
{
	[ControllerToolboxItem(Name = "ListOfCompanies_MVC", Title = "ListOfCompanies", SectionName = "CustomWidgets")]
	public class ListOfCompaniesController : Controller, IPersonalizable
	{
		public string Message { get; set; }

		protected override void HandleUnknownAction(string actionName)
		{
			this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
		}

		// GET: ListOfCompanies
		public ActionResult Detail()
		{

			return View("Detail");
		}

		// GET: ListOfCompanies
		public ActionResult Index()
		{
			var companies = RetrieveCollectionOfCompanies();

            return View(companies);
        }

		// Demonstrates how a collection of Companies can be retrieved
		public IQueryable<DynamicContent> RetrieveCollectionOfCompanies()
		{
			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(String.Empty);
			Type companyType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Company");

			// This is how we get the collection of Company items
			var myCollection = dynamicModuleManager.GetDataItems(companyType)
													.Where (p => p.Status == Telerik.Sitefinity.GenericContent.Model.ContentLifecycleStatus.Live && p.Visible == true);

			// At this point myCollection contains the items from type companyType
			return myCollection;
		}

		public ActionResult Demo(string id)
        {
			return Content("Record is saved in the database with id"+id);
		}
	}
}