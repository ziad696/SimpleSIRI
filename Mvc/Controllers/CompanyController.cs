/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.27
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;

using Telerik.Sitefinity;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.Data.Linq.Dynamic;
using Telerik.Sitefinity.DynamicModules.Model;
using Telerik.Sitefinity.GenericContent.Model;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Security;
using Telerik.Sitefinity.Lifecycle;
using Telerik.Sitefinity.Data;
using Telerik.Sitefinity.Versioning;
using System.Linq;
using System;
using System.Collections.Generic;
using System.Globalization;

using System.Text;
using System.Text.RegularExpressions;

namespace SitefinityWebApp.Mvc.Controllers
{
	[ControllerToolboxItem(Name = "Company_MVC", Title = "Company", SectionName = "CustomWidgets")]
	public class CompanyController : Controller, IPersonalizable
	{
		protected override void HandleUnknownAction(string actionName)
		{
			this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
		}
	
		// GET: Company
		public ActionResult Index()
		{
			List<CompanyModel> companyModel = new List<CompanyModel>();

			var companies = RetrieveCollectionOfCompanies().Where(p => p.Status == Telerik.Sitefinity.GenericContent.Model.ContentLifecycleStatus.Live && p.Visible == true);

			foreach (var company in companies)
            {
				companyModel.Add(
					new CompanyModel 
					{
						Name = company.GetString("Name"),
						Email = company.GetString("Email"),
						Website = company.GetString("Website"),
                        urlName = company.UrlName
					}
				);
            }

			return View("Index", companyModel);
		}

		// GET: Detail
		public ActionResult Detail(string urlName)
		{
            var companyModel = new CompanyModel();
            var company = RetrieveCollectionOfCompanies().Where(c => c.UrlName == urlName).FirstOrDefault();

            companyModel.Name = company.GetString("Name");
            companyModel.Email = company.GetString("Email");
            companyModel.Website = company.GetString("Website");
            return View("Detail", companyModel);
        }

        public ActionResult Create()
		{
			return View("Create");
		}

		[HttpPost] // must declared
        public ActionResult Store(CompanyModel company)
        {
            // Set the provider name for the DynamicModuleManager here. All available providers are listed in
            // Administration -> Settings -> Advanced -> DynamicModules -> Providers
            var providerName = String.Empty;

            // Set a transaction name and get the version manager
            var transactionName = Guid.NewGuid().ToString();
            var versionManager = VersionManager.GetManager(null, transactionName);

            // Set the culture name for the multilingual fields
            var cultureName = "en";
            Telerik.Sitefinity.Services.SystemManager.CurrentContext.Culture = new CultureInfo(cultureName);

            DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);
            Type companyType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Company");
            DynamicContent companyItem = dynamicModuleManager.CreateDataItem(companyType);

            // This is how values for the properties are set
            companyItem.SetString("Name", company.Name, cultureName); 
            companyItem.SetString("Email", company.Email, cultureName);
            companyItem.SetString("Website", company.Website, cultureName);

            // Make company url slug
            string companyUrl = Slugify(company.Name);

            companyItem.SetString("UrlName", companyUrl, cultureName);
            companyItem.SetValue("Owner", SecurityManager.GetCurrentUserId());
            companyItem.SetValue("PublicationDate", DateTime.UtcNow);

            companyItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Draft", new CultureInfo(cultureName));

            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(companyItem, false);
            TransactionManager.CommitTransaction(transactionName);

            // Use lifecycle so that LanguageData and other Multilingual related values are correctly created
            DynamicContent checkOutCompanyItem = dynamicModuleManager.Lifecycle.CheckOut(companyItem) as DynamicContent;
            DynamicContent checkInCompanyItem = dynamicModuleManager.Lifecycle.CheckIn(checkOutCompanyItem) as DynamicContent;
            versionManager.CreateVersion(checkInCompanyItem, false);

            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(companyItem, false);

            // We can now call the following to publish the item
            ILifecycleDataItem publishedCompanyItem = dynamicModuleManager.Lifecycle.Publish(companyItem);

            // You need to set appropriate workflow status
            companyItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");

            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(companyItem, true);

            // Now the item is published and can be seen in the page

            // Commit the transaction in order for the items to be actually persisted to data store
            TransactionManager.CommitTransaction(transactionName);

            return RedirectToAction("Index");
        }

        // Demonstrates how a collection of Companies can be retrieved
        public IQueryable<DynamicContent> RetrieveCollectionOfCompanies()
		{
			// Set the provider name for the DynamicModuleManager here. All available providers are listed in
			// Administration -> Settings -> Advanced -> DynamicModules -> Providers
			var providerName = String.Empty;

			// Set a transaction name
			var transactionName = "someTransactionName";

			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);
			Type companyType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Company");
			
			// This is how we get the collection of Company items
			var myCollection = dynamicModuleManager.GetDataItems(companyType);
			// At this point myCollection contains the items from type companyType
			return myCollection;
        }
        public string Slugify(string phrase)
        {
            // Remove all accents and make the string lower case.  
            string output = RemoveAccents(phrase).ToLower();

            // Remove all special characters from the string.  
            output = Regex.Replace(output, @"[^A-Za-z0-9\s-]", "");

            // Remove all additional spaces in favour of just one.  
            output = Regex.Replace(output, @"\s+", " ").Trim();

            // Replace all spaces with the hyphen.  
            output = Regex.Replace(output, @"\s", "-");

            // Return the slug.  
            return output;
        }

        public string RemoveAccents(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return text;

            text = text.Normalize(NormalizationForm.FormD);
            char[] chars = text
                .Where(c => CharUnicodeInfo.GetUnicodeCategory(c)
                != UnicodeCategory.NonSpacingMark).ToArray();

            return new string(chars).Normalize(NormalizationForm.FormC);
        }
    }
}