/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.27
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;

using Telerik.Sitefinity;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.Data.Linq.Dynamic;
using Telerik.Sitefinity.DynamicModules.Model;
using Telerik.Sitefinity.GenericContent.Model;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Security;
using Telerik.Sitefinity.Lifecycle;
using Telerik.Sitefinity.Data;
using Telerik.Sitefinity.Versioning;
using System.Linq;
using System;
using System.Collections.Generic;
using System.Globalization;
using SitefinityWebApp.MVC.Controllers.Tools;
using Telerik.Sitefinity.Modules.Libraries;
using Telerik.Sitefinity.RelatedData;

using Telerik.Sitefinity.Libraries.Model;
using System.Text.RegularExpressions;

namespace SitefinityWebApp.Mvc.Controllers
{
	[ControllerToolboxItem(Name = "Company_MVC", Title = "Company", SectionName = "CustomWidgets")]
	public class CompanyController : Controller, IPersonalizable
	{
        protected override void HandleUnknownAction(string actionName)
		{
			this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
		}

        // GET: Company
        public ActionResult Index()
		{
			List<CompanyModel> companyModel = new List<CompanyModel>();

			var companies = RetrieveCollectionOfCompanies().Where(p => p.Status == Telerik.Sitefinity.GenericContent.Model.ContentLifecycleStatus.Live && p.Visible == true);

			foreach (var company in companies)
            {
                var logo = company.GetRelatedItems<Image>("Logo").FirstOrDefault();
                string urlLogo = (logo is null) ? "" : logo.MediaUrl;

                companyModel.Add(
					new CompanyModel 
					{
						Name = company.GetString("Name"),
						Email = company.GetString("Email"),
						Website = company.GetString("Website"),
                        urlLogo = urlLogo,
                        urlName = company.UrlName
					}
				);
            }

			return View("Index", companyModel);
		}

        [RelativeRoute("Detail/{urlName}")]
        // GET: Detail
        public ActionResult Detail(string urlName)
		{
            var companyModel = new CompanyModel();
            var company = RetrieveCollectionOfCompanies().Where(c => c.UrlName == urlName).FirstOrDefault();

            var logo = company.GetRelatedItems<Image>("Logo").FirstOrDefault();
            string urlLogo = (logo is null) ? "" : logo.MediaUrl;

            companyModel.Name = company.GetString("Name");
            companyModel.Email = company.GetString("Email");
            companyModel.Website = company.GetString("Website");
            companyModel.urlLogo = urlLogo;
            companyModel.urlName = company.UrlName;

            return View("Detail", companyModel);
        }

        [RelativeRoute("Detail/{urlName}/do-measurement")]
        public ActionResult DoMeasurement(string urlName)
        {
            var companyModel = new CompanyModel();
            var company = RetrieveCollectionOfCompanies().Where(c => c.UrlName == urlName).FirstOrDefault();

            var logo = company.GetRelatedItems<Image>("Logo").FirstOrDefault();
            string urlLogo = (logo is null) ? "" : logo.MediaUrl;

            companyModel.Name = company.GetString("Name");
            companyModel.Email = company.GetString("Email");
            companyModel.Website = company.GetString("Website");
            companyModel.urlLogo = urlLogo;
            companyModel.urlName = company.UrlName;

            return View("DoMeasurement", companyModel);
        }

        [RelativeRoute("Create")]
        public ActionResult Create()
		{
			return View("Create");
		}

        [RelativeRoute("Store")]
        [HttpPost] // must declared
        public ActionResult Store(CompanyModel company)
        {
            // Set the provider name for the DynamicModuleManager here. All available providers are listed in
            // Administration -> Settings -> Advanced -> DynamicModules -> Providers
            var providerName = String.Empty;

            // Set a transaction name and get the version manager
            var transactionName = Guid.NewGuid().ToString();
            var versionManager = VersionManager.GetManager(null, transactionName);

            // Set the culture name for the multilingual fields
            var cultureName = "en";
            Telerik.Sitefinity.Services.SystemManager.CurrentContext.Culture = new CultureInfo(cultureName);

            DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);
            Type companyType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Company");
            DynamicContent companyItem = dynamicModuleManager.CreateDataItem(companyType);

            // This is how values for the properties are set
            companyItem.SetString("Name", company.Name, cultureName);
            companyItem.SetString("Email", company.Email, cultureName);
            companyItem.SetString("Website", company.Website, cultureName);

            companyItem.SetString("UrlName", new Lstring(Regex.Replace(company.Name.ToLower(), Slugify.UrlNameCharsToReplace, Slugify.UrlNameReplaceString)), cultureName);
            companyItem.SetValue("Owner", SecurityManager.GetCurrentUserId());
            companyItem.SetValue("PublicationDate", DateTime.UtcNow);


            companyItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Draft", new CultureInfo(cultureName));


            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(companyItem, false);

            // We can now call the following to publish the item
            ILifecycleDataItem publishedCompanyItem = dynamicModuleManager.Lifecycle.Publish(companyItem);

            // You need to set appropriate workflow status
            companyItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");

            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(companyItem, true);

            // Now the item is published and can be seen in the page //

            // Commit the transaction in order for the items to be actually persisted to data store
            TransactionManager.CommitTransaction(transactionName);

            return RedirectToAction("Index");
        }

        // Demonstrates how a collection of Companies can be retrieved
        public IQueryable<DynamicContent> RetrieveCollectionOfCompanies()
		{
			// Set the provider name for the DynamicModuleManager here. All available providers are listed in
			// Administration -> Settings -> Advanced -> DynamicModules -> Providers
			var providerName = String.Empty;

            // Set a transaction name
            var transactionName = Guid.NewGuid().ToString();

            DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);
			Type companyType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SimpleSIRI.Company");
			
			// This is how we get the collection of Company items
			var myCollection = dynamicModuleManager.GetDataItems(companyType);
			// At this point myCollection contains the items from type companyType
			return myCollection;
        }
    }
}